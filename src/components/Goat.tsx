import React, { useState } from "react";
import { PanResponder, Animated, View, StyleSheet } from "react-native";
import populateCoordinates, { getMoveAngle } from "../utils";
import Svg, {
  Circle,
  Ellipse,
  G,
  Text,
  TSpan,
  TextPath,
  Path,
  Polygon,
  Polyline,
  Line,
  Rect,
  Use,
  Image,
  Symbol,
  Defs,
  LinearGradient,
  RadialGradient,
  Stop,
  SvgXml,
  ClipPath,
  Pattern,
  Mask,
} from "react-native-svg";

import { Audio } from "expo-av";
import goatAudio from "../assets/goat.mp3";
import { mv } from "../constants";

export interface NodeProps {
  n: number;
  spacing: number;
  vSpacing: number;
  moves: Array<string>;
  movable: boolean;
  tigerTurn: boolean;
  isMoveAllowed: (
    initialPosition: number,
    newPosition: number,
    move: string | undefined
  ) => boolean;
  moveGoat: (initialPosition: number, newPosition: number) => void;
  resetMove: (initialPosition: number) => void;
}

const AnimatedUse = Animated.createAnimatedComponent(Use);
const scroll = false;

const zeroDelta = { x: 0, y: 0 };
const Goat: React.FC<NodeProps> = (props: NodeProps) => {
  let { n, spacing, vSpacing, tigerTurn, movable } = props;
  let initialX = spacing / 2;
  let initialY = vSpacing / 2.5;
  let colPosition = n % 5;
  let rowPosition = Math.floor(n / 5);
  let cx = colPosition * spacing + initialX;
  let cy = initialY + rowPosition * vSpacing;

  // console.log("got", colPosition, rowPosition);

  const xy = new Animated.ValueXY();
  const { x: dx, y: dy } = xy;
  let offset = zeroDelta;
  xy.addListener((flatOffset) => {
    console.log("got flatOffset", flatOffset);
    offset = flatOffset;
  });

  const findNextPostion = (
    currentPosition: number,
    move: string | undefined
  ) => {
    if (!move) {
      console.log("move not defined , position cant be found");
      return currentPosition;
    }
    let currentPosOffset = 0;
    switch (move) {
      case mv.top: {
        currentPosOffset = -5;
        break;
      }
      case mv.topRight: {
        currentPosOffset = -4;
        break;
      }
      case mv.right: {
        currentPosOffset = 1;
        break;
      }
      case mv.bottomRight: {
        currentPosOffset = 6;
        break;
      }
      case mv.bottom: {
        currentPosOffset = 5;
        break;
      }
      case mv.bottomLeft: {
        currentPosOffset = 4;
        break;
      }
      case mv.left: {
        currentPosOffset = -1;
        break;
      }
      case mv.topLeft: {
        currentPosOffset = -6;
        break;
      }
      default: {
        currentPosOffset = 0;
        break;
      }
    }
    return currentPosition + currentPosOffset;
  };

  const { panHandlers } = PanResponder.create({
    onStartShouldSetPanResponder: (evt, gestureState) => movable,
    onMoveShouldSetPanResponderCapture: () => movable,
    onPanResponderGrant: () => {
      let finalizedOffset = offset;
      xy.setOffset(finalizedOffset);
      // xy.setOffset({ x: 0, y: 0 });

      xy.setValue(zeroDelta);
    },
    onPanResponderMove: (_, gesture) => {
      let ang = getMoveAngle(gesture.dx, gesture.dy);
      console.log("got", ang);
      let newCoords = populateCoordinates(ang, gesture.dx, gesture.dy);
      console.log("newcoords", newCoords);
      xy.x.setValue(newCoords.x);
      xy.y.setValue(newCoords.y);
    },
    onPanResponderRelease: (e, gestureState) => {
      xy.flattenOffset();
      let initialPosition = n;
      let angle = getMoveAngle(gestureState.dx, gestureState.dy);
      console.log("got angle", angle);
      let { direction } = populateCoordinates(
        angle,
        gestureState.dx,
        gestureState.dy
      );
      let nextPosition = findNextPostion(initialPosition, direction);
      console.log("got direction to ", nextPosition, direction);
      let moveAllowed = props.isMoveAllowed(
        initialPosition,
        nextPosition,
        direction
      );
      if (moveAllowed) {
        props.moveGoat(initialPosition, nextPosition);
      } else {
        console.log("resetting move");
        props.resetMove(initialPosition);
      }

      // console.log("pan resopnder released", gestureState.dx, gestureState.dy);
    },
  });

  const panXY = {
    style: {
      transform: xy.getTranslateTransform(),
      position: "absolute",
    },
    onClick: async () => {
      // try {
      //   const {
      //     sound: soundObject,
      //     status,
      //   } = await Audio.Sound.createAsync(goatAudio, { shouldPlay: true });
      //   // Your sound is playing!
      // } catch (error) {
      //   // An error occurred!
      // }
    },
    ...panHandlers,
  };

  return (
    <>
      <Symbol id="example-symbol" viewBox="0 0 500 500">
        <Path
          d="M426.378 193.699l77.258 87.671s-48.87 34.372-102.072 0H110.436c-53.203 34.372-102.072 0-102.072 0l77.258-87.671"
          fill="#f1b986"
        />
        <Path
          d="M410.138 253.557c0-85.474-69.572-154.699-155.177-154.135-85.327.562-153.444 69.444-153.098 154.773.111 27.328 7.336 52.975 19.918 75.19 10.884 19.218 17.365 40.638 18.055 62.713.891 28.513 12.215 56.76 33.979 78.524 45.167 45.167 119.204 45.167 164.371 0 21.766-21.766 33.09-50.016 33.979-78.531a132.345 132.345 0 0117.555-61.83c12.988-22.588 20.418-48.777 20.418-76.704z"
          fill="#f1d0a5"
        />
        <Path
          d="M256 504.5c-29.807 0-59.604-11.291-82.187-33.873-21.765-21.765-33.086-50.018-33.973-78.529-.698-22.074-7.175-43.49-18.058-62.714-12.587-22.213-19.812-47.865-19.921-75.19-.349-85.326 67.776-154.208 153.102-154.767h.588c-36.833.558-66.232 69.441-66.082 154.767.05 27.326 3.169 52.977 8.6 75.19 4.694 19.224 7.494 40.64 7.793 62.714.379 28.512 5.272 56.764 14.659 78.529C230.279 493.209 243.134 504.5 256 504.5z"
          fill="#f1b986"
        />
        <Path
          d="M223.223 260.133c-12.926-1.206-23.838-8.461-30.196-18.716-9.916 7.116-22.951 9.597-35.457 5.581-13.035-4.186-22.433-14.46-26.041-26.678-12.527 4.534-27.026 2.701-38.258-6.139-12.915-10.155-17.859-26.678-13.882-41.607-16.932-4.554-29.428-19.981-29.488-38.357-.07-18.407 12.347-33.943 29.279-38.587-4.056-14.929.837-31.511 13.732-41.716 11.222-8.88 25.741-10.763 38.278-6.248 3.588-12.218 12.965-22.512 26.01-26.728 12.507-4.036 25.552-1.575 35.478 5.531 6.338-10.255 17.24-17.529 30.176-18.745 12.786-1.206 24.735 3.767 32.877 12.477 8.132-8.72 20.07-13.712 32.856-12.527 12.935 1.196 23.848 8.441 30.206 18.686 9.906-7.116 22.941-9.607 35.448-5.601 13.045 4.186 22.433 14.44 26.061 26.648 12.507-4.544 27.017-2.73 38.258 6.089 12.915 10.135 17.878 26.638 13.942 41.556 16.942 4.504 29.468 19.882 29.598 38.248v.607c0 18.386-12.457 33.873-29.388 38.477 4.016 14.919-.897 31.472-13.803 41.657-11.231 8.859-25.741 10.713-38.268 6.198-3.608 12.218-12.986 22.492-26.03 26.698-12.507 4.026-25.542 1.555-35.468-5.551-6.348 10.244-17.251 17.509-30.186 18.725-12.786 1.196-24.725-3.787-32.867-12.497-7.335 7.863-17.769 12.686-29.12 12.686a42.667 42.667 0 01-3.747-.167z"
          fill="#f9f6f9"
        />
        <Path
          d="M241.48 249.17c-4.435-5.172-7.684-11.47-9.487-18.317-4.385 1.774-9.009 2.681-13.643 2.681-8.63 0-17.31-3.119-24.615-9.557-10.005-8.81-15.217-21.895-15.217-35.119 0-3.857.438-7.713 1.335-11.49-8.471-2.551-15.825-8.142-21.067-15.666-5.252-7.534-8.391-17.001-8.421-27.296v-.169c0-20.549 12.397-37.859 29.279-43.052a49.844 49.844 0 01-1.385-11.69c0-13.175 5.182-26.23 15.118-35.039 7.325-6.488 16.055-9.647 24.725-9.647 4.604 0 9.198.897 13.553 2.651 1.794-6.846 5.033-13.145 9.457-18.327a41.05 41.05 0 016.009-5.76 39.737 39.737 0 00-24.266-5.501 39.685 39.685 0 00-17.559 5.979 40.104 40.104 0 00-12.617 12.766c-6.697-4.794-14.799-7.474-23.21-7.474a39.88 39.88 0 00-12.268 1.943c-6.527 2.113-12.128 5.74-16.553 10.364s-7.664 10.254-9.457 16.363a40.07 40.07 0 00-13.553-2.362c-8.67 0-17.4 2.81-24.725 8.61-9.936 7.863-15.118 19.513-15.118 31.282 0 3.498.458 7.006 1.385 10.434-16.882 4.634-29.279 20.091-29.279 38.438v.149a39.664 39.664 0 008.421 24.366c5.242 6.717 12.606 11.72 21.067 13.992a39.849 39.849 0 00-1.335 10.255c0 11.809 5.212 23.489 15.217 31.352a39.641 39.641 0 0024.605 8.531 40.18 40.18 0 0013.653-2.392 40.02 40.02 0 009.487 16.354 39.674 39.674 0 0016.553 10.325 39.746 39.746 0 0012.208 1.923c8.421 0 16.543-2.691 23.25-7.504 6.358 10.255 17.27 17.51 30.196 18.715 1.256.11 2.511.169 3.747.169 5.68 0 11.122-1.206 16.065-3.398a39.525 39.525 0 004.325-2.242 40.825 40.825 0 01-5.88-5.64z"
          fill="#e2dfe2"
        />
        <G>
          <Path d="M193.4 304.242c0-18.663-10.159-33.846-22.647-33.846s-22.647 15.183-22.647 33.846 10.16 33.846 22.647 33.846 22.647-15.183 22.647-33.846zM363.895 304.242c0-18.663-10.16-33.846-22.647-33.846S318.6 285.579 318.6 304.242s10.159 33.846 22.647 33.846 22.648-15.183 22.648-33.846z" />
          <Path d="M509.263 276.41l-69.904-79.319a47.598 47.598 0 001.907-19.809c7.183-3.168 13.57-8.127 18.409-14.374 6.493-8.368 9.925-18.395 9.925-28.998v-.659c-.069-10.595-3.563-20.591-10.101-28.902a47.772 47.772 0 00-18.469-14.247c.192-1.733.29-3.478.29-5.222a47.834 47.834 0 00-4.346-19.854 7.498 7.498 0 00-9.948-3.679 7.5 7.5 0 00-3.679 9.948 32.729 32.729 0 012.973 13.585c0 2.779-.361 5.558-1.072 8.259a7.5 7.5 0 005.327 9.159c6.717 1.785 12.8 5.802 17.13 11.318 4.463 5.675 6.848 12.498 6.895 19.683v.61c0 7.242-2.343 14.09-6.779 19.806-4.296 5.544-10.36 9.602-17.077 11.426a7.5 7.5 0 00-5.274 9.197 32.155 32.155 0 011.11 8.391c0 9.979-4.489 19.246-12.313 25.42-5.777 4.553-12.706 6.96-20.038 6.96-3.782 0-7.5-.648-11.049-1.926-1.944-.699-4.09-.566-5.933.368s-3.218 2.587-3.802 4.569a32.578 32.578 0 01-7.711 13.291c-3.666 3.841-8.308 6.742-13.428 8.391a32.263 32.263 0 01-9.927 1.568c-6.786 0-13.313-2.103-18.878-6.081a7.499 7.499 0 00-10.733 2.144 32.86 32.86 0 01-10.248 10.363c-4.335 2.732-9.135 4.363-14.267 4.848a32.172 32.172 0 01-3.064.147c-8.904 0-17.513-3.75-23.618-10.289a7.498 7.498 0 00-10.962 0 32.393 32.393 0 01-10.603 7.55 32.018 32.018 0 01-13.036 2.749c-.983 0-2.025-.047-3.057-.138-10.17-.944-19.104-6.483-24.511-15.197a7.5 7.5 0 00-10.742-2.141c-5.563 3.988-12.095 6.096-18.89 6.096-3.347 0-6.68-.525-9.901-1.559-5.12-1.649-9.769-4.548-13.446-8.382a32.693 32.693 0 01-7.703-13.29 7.499 7.499 0 00-9.736-4.924 32.627 32.627 0 01-11.105 1.945c-7.315 0-14.22-2.394-19.975-6.926-7.852-6.172-12.355-15.449-12.355-25.454 0-2.824.366-5.625 1.086-8.325a7.499 7.499 0 00-5.305-9.179c-6.708-1.798-12.781-5.833-17.102-11.363-4.444-5.689-6.806-12.524-6.83-19.743v-.15c0-14.537 9.772-27.37 23.764-31.207a7.502 7.502 0 005.255-9.196 32.386 32.386 0 01-1.129-8.477c0-9.959 4.475-19.218 12.274-25.398 5.781-4.574 12.723-6.992 20.076-6.992 3.782 0 7.483.644 11.003 1.915a7.504 7.504 0 009.743-4.943 32.644 32.644 0 017.682-13.287c3.745-3.914 8.264-6.742 13.44-8.409a32.333 32.333 0 019.961-1.576c6.783 0 13.299 2.099 18.844 6.068a7.5 7.5 0 0010.746-2.156 32.775 32.775 0 0110.238-10.373c4.327-2.736 9.124-4.369 14.258-4.853a32.586 32.586 0 013.074-.147c8.91 0 17.519 3.747 23.618 10.279a7.5 7.5 0 005.482 2.381h.002a7.495 7.495 0 005.482-2.385C267.329 18.76 275.955 15 284.88 15c1.064 0 2.043.044 3.017.138 5.14.477 9.939 2.101 14.264 4.827a32.542 32.542 0 0110.253 10.343 7.5 7.5 0 0010.756 2.14c5.466-3.933 12.175-6.098 18.89-6.098 3.354 0 6.682.522 9.89 1.552 5.109 1.638 9.757 4.53 13.436 8.359a32.816 32.816 0 017.726 13.29 7.502 7.502 0 009.757 4.906 32.39 32.39 0 0111.122-1.957c4.649 0 9.126.967 13.308 2.874a7.5 7.5 0 006.224-13.648c-6.149-2.804-12.72-4.226-19.532-4.226-3.091 0-6.151.296-9.152.884a47.832 47.832 0 00-8.631-12.511c-5.402-5.622-12.207-9.86-19.675-12.254a47.306 47.306 0 00-14.472-2.269c-7.479 0-14.725 1.734-21.302 5.062a47.515 47.515 0 00-10.599-9.136C303.82 3.279 296.795.9 289.307.205A46.37 46.37 0 00284.88 0c-10.583 0-20.875 3.605-29.154 10.067C246.305 2.73 234.321-.897 222.147.254c-7.504.707-14.524 3.099-20.879 7.117a47.837 47.837 0 00-10.571 9.158 47.02 47.02 0 00-21.227-5.028c-4.948 0-9.853.775-14.569 2.301a47.429 47.429 0 00-19.676 12.32 47.816 47.816 0 00-8.603 12.529 47.628 47.628 0 00-8.982-.851c-10.766 0-20.927 3.537-29.388 10.232C76.837 57.079 70.29 70.622 70.29 85.19c0 1.856.109 3.709.326 5.549C53.71 98.215 42.4 115.158 42.4 134.07v.175c.035 10.603 3.496 20.615 10.01 28.953a47.792 47.792 0 0018.439 14.3 47.616 47.616 0 001.861 19.512L2.737 276.411a7.502 7.502 0 001.312 11.092c.512.36 12.762 8.877 31.683 13.581 8.182 2.034 16.368 3.044 24.471 3.044 13.622 0 27.001-2.859 39.69-8.511a160.375 160.375 0 0015.361 37.458c10.542 18.615 16.452 39.107 17.09 59.256.487 15.741 3.898 31.004 10.138 45.367a7.501 7.501 0 1013.758-5.978c-5.479-12.611-8.475-26.02-8.903-39.859-.715-22.574-7.296-45.458-19.031-66.18a145.434 145.434 0 01-15.958-42.529 147.406 147.406 0 01-2.987-28.996 149.202 149.202 0 011.908-24.411 47.56 47.56 0 0015.708-.412 47.63 47.63 0 008.621 12.525c5.393 5.624 12.196 9.869 19.682 12.28a47.369 47.369 0 0014.492 2.279c7.458 0 14.694-1.73 21.273-5.05 7.946 9.268 19.091 15.078 31.522 16.231 1.504.132 2.985.199 4.404.199a46.93 46.93 0 0019.109-4.033 47.346 47.346 0 0010.02-6.008c8.267 6.439 18.534 10.031 29.091 10.031a47.727 47.727 0 0025.344-7.314 47.81 47.81 0 0010.581-9.15 47.091 47.091 0 0021.265 5.044c4.929 0 9.819-.771 14.529-2.292 7.487-2.411 14.291-6.668 19.665-12.298a47.629 47.629 0 008.628-12.531 47.612 47.612 0 0015.495.418 147.872 147.872 0 011.943 23.892c0 9.936-1.008 19.889-2.998 29.587a145.356 145.356 0 01-16.424 43.374c-11.416 19.851-17.829 42.443-18.545 65.333-.875 27.739-12.165 53.833-31.787 73.473-18.667 18.663-43.076 29.659-69.387 31.418V465.28l30.013-30.013a7.5 7.5 0 000-10.606 7.5 7.5 0 00-10.606 0L256 451.567l-26.907-26.906a7.5 7.5 0 00-10.606 0 7.5 7.5 0 000 10.606L248.5 465.28v31.464c-26.311-1.759-50.72-12.755-69.387-31.417a109.714 109.714 0 01-9.75-11.173 7.501 7.501 0 00-11.946 9.072 124.635 124.635 0 0011.09 12.708C191.77 499.191 222.842 512 256 512s64.23-12.809 87.496-36.069c22.329-22.349 35.175-52.04 36.17-83.606.64-20.436 6.365-40.604 16.557-58.327a160.397 160.397 0 0015.88-38.386c12.693 5.655 26.075 8.515 39.701 8.514 8.1 0 16.285-1.01 24.463-3.042 18.922-4.702 31.172-13.22 31.684-13.58a7.497 7.497 0 003.133-5.253 7.505 7.505 0 00-1.821-5.841zm-412.64 4.169c-17.922 8.805-36.979 10.866-56.732 6.082a95.34 95.34 0 01-19.82-7.232l60.004-68.089a47.603 47.603 0 008.554 8.732 47.715 47.715 0 008.191 5.203 164.101 164.101 0 00-2.46 28.944c.034 8.84.802 17.68 2.263 26.36zm375.485 6.08c-19.753 4.783-38.813 2.719-56.74-6.089a162.716 162.716 0 002.272-27.01c0-9.51-.846-19.003-2.491-28.309a47.943 47.943 0 008.407-5.324 47.627 47.627 0 008.394-8.556l59.979 68.057a95.25 95.25 0 01-19.821 7.231z" />
        </G>
      </Symbol>
      <AnimatedUse
        href="#example-symbol"
        x={cx - spacing / 4}
        y={cy - spacing / 4}
        fill={"brown"}
        width={spacing / 2}
        height={spacing / 2}
        opacity={tigerTurn ? 0.8 : 1}
        {...panXY}
      />
    </>
  );
};
export default Goat;
